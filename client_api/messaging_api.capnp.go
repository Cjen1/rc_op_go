// Code generated by capnpc-go. DO NOT EDIT.

package client_api

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Op struct{ capnp.Struct }
type Op_write Op
type Op_Which uint16

const (
	Op_Which_read  Op_Which = 0
	Op_Which_write Op_Which = 1
)

func (w Op_Which) String() string {
	const s = "readwrite"
	switch w {
	case Op_Which_read:
		return s[0:4]
	case Op_Which_write:
		return s[4:9]

	}
	return "Op_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Op_TypeID is the unique identifier for the type Op.
const Op_TypeID = 0xe9d5c8e1ee60afb7

func NewOp(s *capnp.Segment) (Op, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Op{st}, err
}

func NewRootOp(s *capnp.Segment) (Op, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Op{st}, err
}

func ReadRootOp(msg *capnp.Message) (Op, error) {
	root, err := msg.RootPtr()
	return Op{root.Struct()}, err
}

func (s Op) String() string {
	str, _ := text.Marshal(0xe9d5c8e1ee60afb7, s.Struct)
	return str
}

func (s Op) Which() Op_Which {
	return Op_Which(s.Struct.Uint16(0))
}
func (s Op) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Op) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Op) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Op) SetRead() {
	s.Struct.SetUint16(0, 0)

}

func (s Op) Write() Op_write { return Op_write(s) }

func (s Op) SetWrite() {
	s.Struct.SetUint16(0, 1)
}

func (s Op_write) Value() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Op_write) HasValue() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Op_write) SetValue(v []byte) error {
	return s.Struct.SetData(1, v)
}

// Op_List is a list of Op.
type Op_List struct{ capnp.List }

// NewOp creates a new list of Op.
func NewOp_List(s *capnp.Segment, sz int32) (Op_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Op_List{l}, err
}

func (s Op_List) At(i int) Op { return Op{s.List.Struct(i)} }

func (s Op_List) Set(i int, v Op) error { return s.List.SetStruct(i, v.Struct) }

func (s Op_List) String() string {
	str, _ := text.MarshalList(0xe9d5c8e1ee60afb7, s.List)
	return str
}

// Op_Promise is a wrapper for a Op promised by a client call.
type Op_Promise struct{ *capnp.Pipeline }

func (p Op_Promise) Struct() (Op, error) {
	s, err := p.Pipeline.Struct()
	return Op{s}, err
}

func (p Op_Promise) Write() Op_write_Promise { return Op_write_Promise{p.Pipeline} }

// Op_write_Promise is a wrapper for a Op_write promised by a client call.
type Op_write_Promise struct{ *capnp.Pipeline }

func (p Op_write_Promise) Struct() (Op_write, error) {
	s, err := p.Pipeline.Struct()
	return Op_write{s}, err
}

type Command struct{ capnp.Struct }

// Command_TypeID is the unique identifier for the type Command.
const Command_TypeID = 0xbed1c32b27533f00

func NewCommand(s *capnp.Segment) (Command, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Command{st}, err
}

func NewRootCommand(s *capnp.Segment) (Command, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Command{st}, err
}

func ReadRootCommand(msg *capnp.Message) (Command, error) {
	root, err := msg.RootPtr()
	return Command{root.Struct()}, err
}

func (s Command) String() string {
	str, _ := text.Marshal(0xbed1c32b27533f00, s.Struct)
	return str
}

func (s Command) Op() (Op, error) {
	p, err := s.Struct.Ptr(0)
	return Op{Struct: p.Struct()}, err
}

func (s Command) HasOp() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Command) SetOp(v Op) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewOp sets the op field to a newly
// allocated Op struct, preferring placement in s's segment.
func (s Command) NewOp() (Op, error) {
	ss, err := NewOp(s.Struct.Segment())
	if err != nil {
		return Op{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Command) Id() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Command) SetId(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Command_List is a list of Command.
type Command_List struct{ capnp.List }

// NewCommand creates a new list of Command.
func NewCommand_List(s *capnp.Segment, sz int32) (Command_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Command_List{l}, err
}

func (s Command_List) At(i int) Command { return Command{s.List.Struct(i)} }

func (s Command_List) Set(i int, v Command) error { return s.List.SetStruct(i, v.Struct) }

func (s Command_List) String() string {
	str, _ := text.MarshalList(0xbed1c32b27533f00, s.List)
	return str
}

// Command_Promise is a wrapper for a Command promised by a client call.
type Command_Promise struct{ *capnp.Pipeline }

func (p Command_Promise) Struct() (Command, error) {
	s, err := p.Pipeline.Struct()
	return Command{s}, err
}

func (p Command_Promise) Op() Op_Promise {
	return Op_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type LogEntry struct{ capnp.Struct }

// LogEntry_TypeID is the unique identifier for the type LogEntry.
const LogEntry_TypeID = 0xf0494224a2e91235

func NewLogEntry(s *capnp.Segment) (LogEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return LogEntry{st}, err
}

func NewRootLogEntry(s *capnp.Segment) (LogEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return LogEntry{st}, err
}

func ReadRootLogEntry(msg *capnp.Message) (LogEntry, error) {
	root, err := msg.RootPtr()
	return LogEntry{root.Struct()}, err
}

func (s LogEntry) String() string {
	str, _ := text.Marshal(0xf0494224a2e91235, s.Struct)
	return str
}

func (s LogEntry) Command() (Command, error) {
	p, err := s.Struct.Ptr(0)
	return Command{Struct: p.Struct()}, err
}

func (s LogEntry) HasCommand() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s LogEntry) SetCommand(v Command) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCommand sets the command field to a newly
// allocated Command struct, preferring placement in s's segment.
func (s LogEntry) NewCommand() (Command, error) {
	ss, err := NewCommand(s.Struct.Segment())
	if err != nil {
		return Command{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s LogEntry) Term() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s LogEntry) SetTerm(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// LogEntry_List is a list of LogEntry.
type LogEntry_List struct{ capnp.List }

// NewLogEntry creates a new list of LogEntry.
func NewLogEntry_List(s *capnp.Segment, sz int32) (LogEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return LogEntry_List{l}, err
}

func (s LogEntry_List) At(i int) LogEntry { return LogEntry{s.List.Struct(i)} }

func (s LogEntry_List) Set(i int, v LogEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s LogEntry_List) String() string {
	str, _ := text.MarshalList(0xf0494224a2e91235, s.List)
	return str
}

// LogEntry_Promise is a wrapper for a LogEntry promised by a client call.
type LogEntry_Promise struct{ *capnp.Pipeline }

func (p LogEntry_Promise) Struct() (LogEntry, error) {
	s, err := p.Pipeline.Struct()
	return LogEntry{s}, err
}

func (p LogEntry_Promise) Command() Command_Promise {
	return Command_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type RequestVote struct{ capnp.Struct }

// RequestVote_TypeID is the unique identifier for the type RequestVote.
const RequestVote_TypeID = 0xfeff051f9889df8d

func NewRequestVote(s *capnp.Segment) (RequestVote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return RequestVote{st}, err
}

func NewRootRequestVote(s *capnp.Segment) (RequestVote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return RequestVote{st}, err
}

func ReadRootRequestVote(msg *capnp.Message) (RequestVote, error) {
	root, err := msg.RootPtr()
	return RequestVote{root.Struct()}, err
}

func (s RequestVote) String() string {
	str, _ := text.Marshal(0xfeff051f9889df8d, s.Struct)
	return str
}

func (s RequestVote) Term() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s RequestVote) SetTerm(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s RequestVote) LeaderCommit() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s RequestVote) SetLeaderCommit(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

// RequestVote_List is a list of RequestVote.
type RequestVote_List struct{ capnp.List }

// NewRequestVote creates a new list of RequestVote.
func NewRequestVote_List(s *capnp.Segment, sz int32) (RequestVote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return RequestVote_List{l}, err
}

func (s RequestVote_List) At(i int) RequestVote { return RequestVote{s.List.Struct(i)} }

func (s RequestVote_List) Set(i int, v RequestVote) error { return s.List.SetStruct(i, v.Struct) }

func (s RequestVote_List) String() string {
	str, _ := text.MarshalList(0xfeff051f9889df8d, s.List)
	return str
}

// RequestVote_Promise is a wrapper for a RequestVote promised by a client call.
type RequestVote_Promise struct{ *capnp.Pipeline }

func (p RequestVote_Promise) Struct() (RequestVote, error) {
	s, err := p.Pipeline.Struct()
	return RequestVote{s}, err
}

type RequestVoteResp struct{ capnp.Struct }

// RequestVoteResp_TypeID is the unique identifier for the type RequestVoteResp.
const RequestVoteResp_TypeID = 0xf0eb2779e4b73008

func NewRequestVoteResp(s *capnp.Segment) (RequestVoteResp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RequestVoteResp{st}, err
}

func NewRootRequestVoteResp(s *capnp.Segment) (RequestVoteResp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RequestVoteResp{st}, err
}

func ReadRootRequestVoteResp(msg *capnp.Message) (RequestVoteResp, error) {
	root, err := msg.RootPtr()
	return RequestVoteResp{root.Struct()}, err
}

func (s RequestVoteResp) String() string {
	str, _ := text.Marshal(0xf0eb2779e4b73008, s.Struct)
	return str
}

func (s RequestVoteResp) Term() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s RequestVoteResp) SetTerm(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s RequestVoteResp) VoteGranted() bool {
	return s.Struct.Bit(64)
}

func (s RequestVoteResp) SetVoteGranted(v bool) {
	s.Struct.SetBit(64, v)
}

func (s RequestVoteResp) Entries() (LogEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return LogEntry_List{List: p.List()}, err
}

func (s RequestVoteResp) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RequestVoteResp) SetEntries(v LogEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated LogEntry_List, preferring placement in s's segment.
func (s RequestVoteResp) NewEntries(n int32) (LogEntry_List, error) {
	l, err := NewLogEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return LogEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s RequestVoteResp) StartIndex() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s RequestVoteResp) SetStartIndex(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

// RequestVoteResp_List is a list of RequestVoteResp.
type RequestVoteResp_List struct{ capnp.List }

// NewRequestVoteResp creates a new list of RequestVoteResp.
func NewRequestVoteResp_List(s *capnp.Segment, sz int32) (RequestVoteResp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return RequestVoteResp_List{l}, err
}

func (s RequestVoteResp_List) At(i int) RequestVoteResp { return RequestVoteResp{s.List.Struct(i)} }

func (s RequestVoteResp_List) Set(i int, v RequestVoteResp) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RequestVoteResp_List) String() string {
	str, _ := text.MarshalList(0xf0eb2779e4b73008, s.List)
	return str
}

// RequestVoteResp_Promise is a wrapper for a RequestVoteResp promised by a client call.
type RequestVoteResp_Promise struct{ *capnp.Pipeline }

func (p RequestVoteResp_Promise) Struct() (RequestVoteResp, error) {
	s, err := p.Pipeline.Struct()
	return RequestVoteResp{s}, err
}

type AppendEntries struct{ capnp.Struct }

// AppendEntries_TypeID is the unique identifier for the type AppendEntries.
const AppendEntries_TypeID = 0xc59bcc152c6e44c7

func NewAppendEntries(s *capnp.Segment) (AppendEntries, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return AppendEntries{st}, err
}

func NewRootAppendEntries(s *capnp.Segment) (AppendEntries, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return AppendEntries{st}, err
}

func ReadRootAppendEntries(msg *capnp.Message) (AppendEntries, error) {
	root, err := msg.RootPtr()
	return AppendEntries{root.Struct()}, err
}

func (s AppendEntries) String() string {
	str, _ := text.Marshal(0xc59bcc152c6e44c7, s.Struct)
	return str
}

func (s AppendEntries) Term() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s AppendEntries) SetTerm(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s AppendEntries) PrevLogIndex() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s AppendEntries) SetPrevLogIndex(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s AppendEntries) PrevLogTerm() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s AppendEntries) SetPrevLogTerm(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s AppendEntries) Entries() (LogEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return LogEntry_List{List: p.List()}, err
}

func (s AppendEntries) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AppendEntries) SetEntries(v LogEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated LogEntry_List, preferring placement in s's segment.
func (s AppendEntries) NewEntries(n int32) (LogEntry_List, error) {
	l, err := NewLogEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return LogEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s AppendEntries) LeaderCommit() int64 {
	return int64(s.Struct.Uint64(24))
}

func (s AppendEntries) SetLeaderCommit(v int64) {
	s.Struct.SetUint64(24, uint64(v))
}

// AppendEntries_List is a list of AppendEntries.
type AppendEntries_List struct{ capnp.List }

// NewAppendEntries creates a new list of AppendEntries.
func NewAppendEntries_List(s *capnp.Segment, sz int32) (AppendEntries_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1}, sz)
	return AppendEntries_List{l}, err
}

func (s AppendEntries_List) At(i int) AppendEntries { return AppendEntries{s.List.Struct(i)} }

func (s AppendEntries_List) Set(i int, v AppendEntries) error { return s.List.SetStruct(i, v.Struct) }

func (s AppendEntries_List) String() string {
	str, _ := text.MarshalList(0xc59bcc152c6e44c7, s.List)
	return str
}

// AppendEntries_Promise is a wrapper for a AppendEntries promised by a client call.
type AppendEntries_Promise struct{ *capnp.Pipeline }

func (p AppendEntries_Promise) Struct() (AppendEntries, error) {
	s, err := p.Pipeline.Struct()
	return AppendEntries{s}, err
}

type AppendEntriesResp struct{ capnp.Struct }
type AppendEntriesResp_Which uint16

const (
	AppendEntriesResp_Which_success AppendEntriesResp_Which = 0
	AppendEntriesResp_Which_failure AppendEntriesResp_Which = 1
)

func (w AppendEntriesResp_Which) String() string {
	const s = "successfailure"
	switch w {
	case AppendEntriesResp_Which_success:
		return s[0:7]
	case AppendEntriesResp_Which_failure:
		return s[7:14]

	}
	return "AppendEntriesResp_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// AppendEntriesResp_TypeID is the unique identifier for the type AppendEntriesResp.
const AppendEntriesResp_TypeID = 0x84d8cf475f4b9f54

func NewAppendEntriesResp(s *capnp.Segment) (AppendEntriesResp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return AppendEntriesResp{st}, err
}

func NewRootAppendEntriesResp(s *capnp.Segment) (AppendEntriesResp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return AppendEntriesResp{st}, err
}

func ReadRootAppendEntriesResp(msg *capnp.Message) (AppendEntriesResp, error) {
	root, err := msg.RootPtr()
	return AppendEntriesResp{root.Struct()}, err
}

func (s AppendEntriesResp) String() string {
	str, _ := text.Marshal(0x84d8cf475f4b9f54, s.Struct)
	return str
}

func (s AppendEntriesResp) Which() AppendEntriesResp_Which {
	return AppendEntriesResp_Which(s.Struct.Uint16(16))
}
func (s AppendEntriesResp) Term() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s AppendEntriesResp) SetTerm(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s AppendEntriesResp) Success() int64 {
	if s.Struct.Uint16(16) != 0 {
		panic("Which() != success")
	}
	return int64(s.Struct.Uint64(8))
}

func (s AppendEntriesResp) SetSuccess(v int64) {
	s.Struct.SetUint16(16, 0)
	s.Struct.SetUint64(8, uint64(v))
}

func (s AppendEntriesResp) Failure() int64 {
	if s.Struct.Uint16(16) != 1 {
		panic("Which() != failure")
	}
	return int64(s.Struct.Uint64(8))
}

func (s AppendEntriesResp) SetFailure(v int64) {
	s.Struct.SetUint16(16, 1)
	s.Struct.SetUint64(8, uint64(v))
}

// AppendEntriesResp_List is a list of AppendEntriesResp.
type AppendEntriesResp_List struct{ capnp.List }

// NewAppendEntriesResp creates a new list of AppendEntriesResp.
func NewAppendEntriesResp_List(s *capnp.Segment, sz int32) (AppendEntriesResp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return AppendEntriesResp_List{l}, err
}

func (s AppendEntriesResp_List) At(i int) AppendEntriesResp {
	return AppendEntriesResp{s.List.Struct(i)}
}

func (s AppendEntriesResp_List) Set(i int, v AppendEntriesResp) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AppendEntriesResp_List) String() string {
	str, _ := text.MarshalList(0x84d8cf475f4b9f54, s.List)
	return str
}

// AppendEntriesResp_Promise is a wrapper for a AppendEntriesResp promised by a client call.
type AppendEntriesResp_Promise struct{ *capnp.Pipeline }

func (p AppendEntriesResp_Promise) Struct() (AppendEntriesResp, error) {
	s, err := p.Pipeline.Struct()
	return AppendEntriesResp{s}, err
}

type ClientRequest struct{ capnp.Struct }
type ClientRequest_Which uint16

const (
	ClientRequest_Which_read  ClientRequest_Which = 0
	ClientRequest_Which_write ClientRequest_Which = 1
)

func (w ClientRequest_Which) String() string {
	const s = "readwrite"
	switch w {
	case ClientRequest_Which_read:
		return s[0:4]
	case ClientRequest_Which_write:
		return s[4:9]

	}
	return "ClientRequest_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ClientRequest_TypeID is the unique identifier for the type ClientRequest.
const ClientRequest_TypeID = 0xeb238de24963377c

func NewClientRequest(s *capnp.Segment) (ClientRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return ClientRequest{st}, err
}

func NewRootClientRequest(s *capnp.Segment) (ClientRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return ClientRequest{st}, err
}

func ReadRootClientRequest(msg *capnp.Message) (ClientRequest, error) {
	root, err := msg.RootPtr()
	return ClientRequest{root.Struct()}, err
}

func (s ClientRequest) String() string {
	str, _ := text.Marshal(0xeb238de24963377c, s.Struct)
	return str
}

func (s ClientRequest) Which() ClientRequest_Which {
	return ClientRequest_Which(s.Struct.Uint16(8))
}
func (s ClientRequest) Id() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s ClientRequest) SetId(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s ClientRequest) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ClientRequest) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ClientRequest) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ClientRequest) SetRead() {
	s.Struct.SetUint16(8, 0)

}

func (s ClientRequest) Write() ([]byte, error) {
	if s.Struct.Uint16(8) != 1 {
		panic("Which() != write")
	}
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s ClientRequest) HasWrite() bool {
	if s.Struct.Uint16(8) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ClientRequest) SetWrite(v []byte) error {
	s.Struct.SetUint16(8, 1)
	return s.Struct.SetData(1, v)
}

// ClientRequest_List is a list of ClientRequest.
type ClientRequest_List struct{ capnp.List }

// NewClientRequest creates a new list of ClientRequest.
func NewClientRequest_List(s *capnp.Segment, sz int32) (ClientRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return ClientRequest_List{l}, err
}

func (s ClientRequest_List) At(i int) ClientRequest { return ClientRequest{s.List.Struct(i)} }

func (s ClientRequest_List) Set(i int, v ClientRequest) error { return s.List.SetStruct(i, v.Struct) }

func (s ClientRequest_List) String() string {
	str, _ := text.MarshalList(0xeb238de24963377c, s.List)
	return str
}

// ClientRequest_Promise is a wrapper for a ClientRequest promised by a client call.
type ClientRequest_Promise struct{ *capnp.Pipeline }

func (p ClientRequest_Promise) Struct() (ClientRequest, error) {
	s, err := p.Pipeline.Struct()
	return ClientRequest{s}, err
}

type ClientResponse struct{ capnp.Struct }
type ClientResponse_Which uint16

const (
	ClientResponse_Which_success     ClientResponse_Which = 0
	ClientResponse_Which_readSuccess ClientResponse_Which = 1
	ClientResponse_Which_failure     ClientResponse_Which = 2
)

func (w ClientResponse_Which) String() string {
	const s = "successreadSuccessfailure"
	switch w {
	case ClientResponse_Which_success:
		return s[0:7]
	case ClientResponse_Which_readSuccess:
		return s[7:18]
	case ClientResponse_Which_failure:
		return s[18:25]

	}
	return "ClientResponse_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ClientResponse_TypeID is the unique identifier for the type ClientResponse.
const ClientResponse_TypeID = 0x94fe3f4a27ce94b8

func NewClientResponse(s *capnp.Segment) (ClientResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ClientResponse{st}, err
}

func NewRootClientResponse(s *capnp.Segment) (ClientResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ClientResponse{st}, err
}

func ReadRootClientResponse(msg *capnp.Message) (ClientResponse, error) {
	root, err := msg.RootPtr()
	return ClientResponse{root.Struct()}, err
}

func (s ClientResponse) String() string {
	str, _ := text.Marshal(0x94fe3f4a27ce94b8, s.Struct)
	return str
}

func (s ClientResponse) Which() ClientResponse_Which {
	return ClientResponse_Which(s.Struct.Uint16(8))
}
func (s ClientResponse) Id() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s ClientResponse) SetId(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s ClientResponse) SetSuccess() {
	s.Struct.SetUint16(8, 0)

}

func (s ClientResponse) ReadSuccess() ([]byte, error) {
	if s.Struct.Uint16(8) != 1 {
		panic("Which() != readSuccess")
	}
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ClientResponse) HasReadSuccess() bool {
	if s.Struct.Uint16(8) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ClientResponse) SetReadSuccess(v []byte) error {
	s.Struct.SetUint16(8, 1)
	return s.Struct.SetData(0, v)
}

func (s ClientResponse) SetFailure() {
	s.Struct.SetUint16(8, 2)

}

// ClientResponse_List is a list of ClientResponse.
type ClientResponse_List struct{ capnp.List }

// NewClientResponse creates a new list of ClientResponse.
func NewClientResponse_List(s *capnp.Segment, sz int32) (ClientResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return ClientResponse_List{l}, err
}

func (s ClientResponse_List) At(i int) ClientResponse { return ClientResponse{s.List.Struct(i)} }

func (s ClientResponse_List) Set(i int, v ClientResponse) error { return s.List.SetStruct(i, v.Struct) }

func (s ClientResponse_List) String() string {
	str, _ := text.MarshalList(0x94fe3f4a27ce94b8, s.List)
	return str
}

// ClientResponse_Promise is a wrapper for a ClientResponse promised by a client call.
type ClientResponse_Promise struct{ *capnp.Pipeline }

func (p ClientResponse_Promise) Struct() (ClientResponse, error) {
	s, err := p.Pipeline.Struct()
	return ClientResponse{s}, err
}

type ServerMessage struct{ capnp.Struct }
type ServerMessage_Which uint16

const (
	ServerMessage_Which_requestVote       ServerMessage_Which = 0
	ServerMessage_Which_requestVoteResp   ServerMessage_Which = 1
	ServerMessage_Which_appendEntries     ServerMessage_Which = 2
	ServerMessage_Which_appendEntriesResp ServerMessage_Which = 3
	ServerMessage_Which_clientRequest     ServerMessage_Which = 4
	ServerMessage_Which_clientResponse    ServerMessage_Which = 5
)

func (w ServerMessage_Which) String() string {
	const s = "requestVoterequestVoteRespappendEntriesappendEntriesRespclientRequestclientResponse"
	switch w {
	case ServerMessage_Which_requestVote:
		return s[0:11]
	case ServerMessage_Which_requestVoteResp:
		return s[11:26]
	case ServerMessage_Which_appendEntries:
		return s[26:39]
	case ServerMessage_Which_appendEntriesResp:
		return s[39:56]
	case ServerMessage_Which_clientRequest:
		return s[56:69]
	case ServerMessage_Which_clientResponse:
		return s[69:83]

	}
	return "ServerMessage_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ServerMessage_TypeID is the unique identifier for the type ServerMessage.
const ServerMessage_TypeID = 0xd297ccb012332ee0

func NewServerMessage(s *capnp.Segment) (ServerMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServerMessage{st}, err
}

func NewRootServerMessage(s *capnp.Segment) (ServerMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServerMessage{st}, err
}

func ReadRootServerMessage(msg *capnp.Message) (ServerMessage, error) {
	root, err := msg.RootPtr()
	return ServerMessage{root.Struct()}, err
}

func (s ServerMessage) String() string {
	str, _ := text.Marshal(0xd297ccb012332ee0, s.Struct)
	return str
}

func (s ServerMessage) Which() ServerMessage_Which {
	return ServerMessage_Which(s.Struct.Uint16(0))
}
func (s ServerMessage) RequestVote() (RequestVote, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != requestVote")
	}
	p, err := s.Struct.Ptr(0)
	return RequestVote{Struct: p.Struct()}, err
}

func (s ServerMessage) HasRequestVote() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServerMessage) SetRequestVote(v RequestVote) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequestVote sets the requestVote field to a newly
// allocated RequestVote struct, preferring placement in s's segment.
func (s ServerMessage) NewRequestVote() (RequestVote, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewRequestVote(s.Struct.Segment())
	if err != nil {
		return RequestVote{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ServerMessage) RequestVoteResp() (RequestVoteResp, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != requestVoteResp")
	}
	p, err := s.Struct.Ptr(0)
	return RequestVoteResp{Struct: p.Struct()}, err
}

func (s ServerMessage) HasRequestVoteResp() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServerMessage) SetRequestVoteResp(v RequestVoteResp) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequestVoteResp sets the requestVoteResp field to a newly
// allocated RequestVoteResp struct, preferring placement in s's segment.
func (s ServerMessage) NewRequestVoteResp() (RequestVoteResp, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewRequestVoteResp(s.Struct.Segment())
	if err != nil {
		return RequestVoteResp{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ServerMessage) AppendEntries() (AppendEntries, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != appendEntries")
	}
	p, err := s.Struct.Ptr(0)
	return AppendEntries{Struct: p.Struct()}, err
}

func (s ServerMessage) HasAppendEntries() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServerMessage) SetAppendEntries(v AppendEntries) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAppendEntries sets the appendEntries field to a newly
// allocated AppendEntries struct, preferring placement in s's segment.
func (s ServerMessage) NewAppendEntries() (AppendEntries, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewAppendEntries(s.Struct.Segment())
	if err != nil {
		return AppendEntries{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ServerMessage) AppendEntriesResp() (AppendEntriesResp, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != appendEntriesResp")
	}
	p, err := s.Struct.Ptr(0)
	return AppendEntriesResp{Struct: p.Struct()}, err
}

func (s ServerMessage) HasAppendEntriesResp() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServerMessage) SetAppendEntriesResp(v AppendEntriesResp) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAppendEntriesResp sets the appendEntriesResp field to a newly
// allocated AppendEntriesResp struct, preferring placement in s's segment.
func (s ServerMessage) NewAppendEntriesResp() (AppendEntriesResp, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewAppendEntriesResp(s.Struct.Segment())
	if err != nil {
		return AppendEntriesResp{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ServerMessage) ClientRequest() (ClientRequest, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != clientRequest")
	}
	p, err := s.Struct.Ptr(0)
	return ClientRequest{Struct: p.Struct()}, err
}

func (s ServerMessage) HasClientRequest() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServerMessage) SetClientRequest(v ClientRequest) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewClientRequest sets the clientRequest field to a newly
// allocated ClientRequest struct, preferring placement in s's segment.
func (s ServerMessage) NewClientRequest() (ClientRequest, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewClientRequest(s.Struct.Segment())
	if err != nil {
		return ClientRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ServerMessage) ClientResponse() (ClientResponse, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != clientResponse")
	}
	p, err := s.Struct.Ptr(0)
	return ClientResponse{Struct: p.Struct()}, err
}

func (s ServerMessage) HasClientResponse() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServerMessage) SetClientResponse(v ClientResponse) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewClientResponse sets the clientResponse field to a newly
// allocated ClientResponse struct, preferring placement in s's segment.
func (s ServerMessage) NewClientResponse() (ClientResponse, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewClientResponse(s.Struct.Segment())
	if err != nil {
		return ClientResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ServerMessage_List is a list of ServerMessage.
type ServerMessage_List struct{ capnp.List }

// NewServerMessage creates a new list of ServerMessage.
func NewServerMessage_List(s *capnp.Segment, sz int32) (ServerMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ServerMessage_List{l}, err
}

func (s ServerMessage_List) At(i int) ServerMessage { return ServerMessage{s.List.Struct(i)} }

func (s ServerMessage_List) Set(i int, v ServerMessage) error { return s.List.SetStruct(i, v.Struct) }

func (s ServerMessage_List) String() string {
	str, _ := text.MarshalList(0xd297ccb012332ee0, s.List)
	return str
}

// ServerMessage_Promise is a wrapper for a ServerMessage promised by a client call.
type ServerMessage_Promise struct{ *capnp.Pipeline }

func (p ServerMessage_Promise) Struct() (ServerMessage, error) {
	s, err := p.Pipeline.Struct()
	return ServerMessage{s}, err
}

func (p ServerMessage_Promise) RequestVote() RequestVote_Promise {
	return RequestVote_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ServerMessage_Promise) RequestVoteResp() RequestVoteResp_Promise {
	return RequestVoteResp_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ServerMessage_Promise) AppendEntries() AppendEntries_Promise {
	return AppendEntries_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ServerMessage_Promise) AppendEntriesResp() AppendEntriesResp_Promise {
	return AppendEntriesResp_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ServerMessage_Promise) ClientRequest() ClientRequest_Promise {
	return ClientRequest_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ServerMessage_Promise) ClientResponse() ClientResponse_Promise {
	return ClientResponse_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_d66c44db48f005fe = "x\xda\x8cUo\x88\x14e\x18\x7f~\xef;\xbb\xb3G" +
	"n\xb7{\xb3\xf6G\x90\x05\x13\xacK\xc5n\x8b\xa2/" +
	"g\xe7\x1dz\xe5\x91\xafZQ$:\xee\xbe\x9d[\xbb" +
	"\xb3\xeb\xcc\xdc\xa9\x91\x99\xe1\x87\x04\xfd`\x08\x19}\xe8" +
	"\x0f\x16\x06\x81\x06\x82\x15\x15AI\x06\x96\x15\x14\x85D" +
	"%\x81\xa8 \xe7\x87\xbeT\xb7\x13\xcf\xee\xec\xce\xdet" +
	"j\xdfv\x9e\xf7\xb7\xcf\xfb\x9b\xdf\xf3{~\xb3\xec\xb2" +
	"X.\xeeJ\x9c\x91Djq\"\x19\xac\x7f\xfd\xa1\x8d" +
	"+\xcf\xfc\xb4\x87T\x0e2h$\xa6V\x9d\x1d\xae\xfc" +
	"H\xc3\xa6@\xaa\xf05\x06`\xfd\x02\x93\xc8\xfa\x19G" +
	"\x09\xc1\x07\x07\xbfY\xf4\xe0`\xe3 \xa3E\x84\x1e\x81" +
	")a\x14\xb6\x8ay\xb0v\x0b\x86\xef\x14\xe7\x09\x8d\xc1" +
	"u\x8b\xee\xfc\xfc\xbbOU\x0e\x88\xc0\x89f\xbfG\xe4" +
	"9\xcb\x96\xfck\x83\xdcF\x08\xbe\x1cv\x16\xcf=\xfd" +
	"\xdaI\xeel\xc4\xc0\x85\x0fe\x1f\xac\xaf\x18]8)" +
	"\xf3 \x04\xbf--\xf4\x1d;\xfd\xca\xf74\xb3\xf7\x08" +
	"\xcc$Q\xe1\x8a\xd1\x07\x0b\x09\xc6O\x1b\x8f1\xbe\xe7" +
	"\x86w\x9eON\xdft\x96\xd4\xcd@p\xe2\xe8\xa6\xcb" +
	"\xbf\x9f\xfa\xe1\x02\xcd\x15&\x88,\x9d\xbcH\xb0\xca\xc9" +
	"A\xea:\x8bu\x16\xa6 \xb2\xf6&?\xb2\x0e$\x99" +
	"\xf6\xfe$\x0b\xf2\xdc\xbd\xc5\xd1s\xfbo\xbb\x14\x17D" +
	"\x98\x02F\xa1\xc7\xec\x83u\xab\xc9\xf0\xb9\xe6yBp" +
	"O\xdf\x85\xb7\x16\x0e\x8dN\xd1l\x92\\0/Z\x7f" +
	"6\xc1WL\x96$\xb5\xec\xc4\x1f;\x16]\x9a\x8a\x8d" +
	"\xa6%\xc9Xj\x01\xac\x0d)F?\x9e\xe2\xd6\xfb\x7f" +
	"\xdd{(\x9f\x08\x1a1&\x06\x83Gz\x04,\xd5\xc3" +
	"\xe0\xb1\x1en]\xd5\x9eg\x8f\x97\x1d9\xbe\xd1\xae\x97" +
	"\x97\x16\xed\xbaS\xbf\xff\x81z];\xa5\x11\xc7w\xcb" +
	":\xef\xad\xd5^}\x0d\xa0\xe6H\x83\xc8\x00Qv\xa4" +
	"\x9fH-\x97P\xab\x05\xe6#\x08\x90\x03\x97G\x87\x88" +
	"\xd4\xb0\x84Z#0_4\xb8,\x88\xb2c\\^%" +
	"\xa1\xd6\x0b\xf4\xfa\xda\xad\"A\x02\x09\xc2.o\xa2X" +
	"\xd4\x9e\xd7y~\xca.W&\\\xdd~\x9e\x9d\xdc\x8a" +
	"JY;>\x93\xaa9\xd2\xd3\xcc,\xd3af\xcf#" +
	"ROJ\xa8-\x02i\x04A\x8b\x98f\x06\x9b$T" +
	"E -\x1aA\x8bWy3\x91\xda\"\xa1|\x81\xb4" +
	"\x9c\x0er\x90D\xd9\xad\x8c\xadH\xa8\xed\x02\xb2\\\x8a" +
	"s\xa5d\xe0j\xbb\xb4n\xa2X$\x93\xb9\xa7I " +
	"\x1dq\xa7d\x87\xb5\x98\xc1\xbaV\xad\x9a\xb6Sb\xba" +
	"\xa9\x0e\xdd;\x98\xeeB\x09\xb5L\x00\xa1\x8aK\xb8v" +
	"\xbb\x84\xba[@\xd6\xea\xc8DF$ C\xdd\xac\xae" +
	"?>x|c\xaes\xe3N\x1e\xddv\x09\xb5G " +
	"\xdb\xber\xf7\xd3D\xea\x05\x09\xb5O +DK\x9e" +
	"\xbd,\xcfK\x12\xea\xa0\x00dK\x9c\x03,\xce>\x09" +
	"uD k\xc8\x1c\x0c\xa2\xec\xdb\xfc\xef\xc3\x12\xeaX" +
	"l\xbeA\xdd\xd5\x93\xabk\xe3\xa3\xd4\xeb\x94\xf4\xf6x" +
	"y=\x99\xddf\xd0M\xbe\x1en$\xac\x91@&Z" +
	"\x11\x02\x17\x83\x8a\xb6K\xda]Q\xa3\xdej\xb5\xec_" +
	"[\x82u\xda\x9d\xd4\xeeX\xf3\x08M\x8f\xdc\"\x8d9" +
	"A\xd0\xd4\xe0U~\xb3C\x12\xea0\x9b\xa4\x11\x9a\xe4" +
	"\xcd\x17\x89\xd4\x1b\x12\xea=6\xc9th\x92w]\"" +
	"uDB\x1dg\x93\xfc\x13\x9a\xe4\xfd\x97\x89\xd4q\x09" +
	"\xf5\x99@\xda\xf8;h\x09\xf1\x09c?\x96P\xa7\x04" +
	"\xd2\x89\xbf\x82\x1c\x12D\xd9\x93\xcf\x12\xa9/$\xd4\xb7" +
	"\x02\x81\xab\xb7Nh\xcf\x7f\x94\xcc\x9a\xaf\x91\x89v\xb5" +
	"5\xda\xce9j\xbef\x8b\x132\xd1\xf6\x87\x18;\x1c" +
	"/\xe5[\x82e\xa2\xc8\x8c!\xd0\x04\xac\xd5\x1e\xd8F" +
	"\x9d\x80\x0fQ\xc5p\x91(\xdf\xbc\x13\x99(\xc3\xe2\x88" +
	"A^6\x8f\x09wr?\x84\xccj\xf6\x87\xebK\xb7" +
	"\xf5\xbae_+C\x1a\x990\x06\xd2\x03D*%\xa1" +
	"r\x02\xf9I\xbb2\xa1\xdb\xbb\xd3i\x82v\x93\xc1V" +
	"\x97X\xea,\x88R'\xda\xed\xd1\xfe(tx\xb7\xd1" +
	"\x15\xf1\xd9\xb1\x01\x12\xe63zG\xfb\xa6^\xde]J" +
	"\xe6\xb71\xb9k\xc7\x0bk\x02\xff\xea\xe9\xd2\xde\x1d\xbd" +
	"\xa0;[\x82v\xb60\xab\x92\x84\xaa\x0b\xcc\x97\xcd(" +
	"d\xdfT\x07\xa2\xc8\xe9Z\xe3\xabR\xfc\x8fB3d" +
	"^]\x1b\x1f\xe9u|wG,T\x86f\x09\x95\xfe" +
	"(Tv\x15k\xd5\xaa\xed\x94\x90i\x7f\x96[\xb3\x9c" +
	"\xb9\xbb\xb3\x8a\xb36\xb4'\xbb\xd3\x0c?\x0b]\xf2\xf4" +
	"G\xf2d\xb1<\xd4gs\xa4\x04\xc2h\xa9\x0e\x852" +
	"p\x08I\xd1\xd2f\xf7\x13Q\x08\xcd\xa42Y\xf3\xf5" +
	"J\xd7v\xc8\xf4u\x09 \x01\xfc\x9f\xbc\xf0|\xdb\xf5" +
	"G\x9d\x12\xc9\xae\xec\xb9\xdekQL\xcb\xfeH\xcbN" +
	"\\.\xe1\xc0[,\xa1\xee\x8b3\x9d=\xa2\xfe\x0d\x00" +
	"\x00\xff\xff:jg\xea"

func init() {
	schemas.Register(schema_d66c44db48f005fe,
		0x84d8cf475f4b9f54,
		0x94fe3f4a27ce94b8,
		0xbed1c32b27533f00,
		0xc59bcc152c6e44c7,
		0xd297ccb012332ee0,
		0xdb16fd067ea60b09,
		0xe9d5c8e1ee60afb7,
		0xeb238de24963377c,
		0xf0494224a2e91235,
		0xf0eb2779e4b73008,
		0xfeff051f9889df8d)
}
